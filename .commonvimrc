" Configuration
set ignorecase              " case insensitive
set smartcase               " smart casing when searching
set hlsearch                " highlight search 
set incsearch               " incremental search
set number                  " add line numbers
set clipboard=unnamedplus   " using system clipboard
set rnu                     " Relative number

" Leader
nnoremap <Space> <Nop>
let mapleader=" "

" Duplicate
nnoremap <C-D> ddup
vnoremap <C-D> yP

" NerdTree
nnoremap <F1> :NERDTreeToggle<CR>
vnoremap <F1> :NERDTreeToggle<CR>
inoremap <F1> <ESC>:NERDTreeToggle<CR>
 
" Easymotion
nmap <Leader>j <Plug>(easymotion-bd-f)
 
" Move line up/down
nnoremap <C-S-K> <ESC>:m .-2<CR>
nnoremap <C-S-J> <ESC>:m .+1<CR>
vnoremap <C-S-K> :m '<-2<CR>gv=gv
vnoremap <C-S-J> :m '>+1<CR>gv=gv
 
" New line
nnoremap <C-Enter> <ESC>o<ESC>
nnoremap <S-Enter> <ESC>O<ESC>

" Surround
" let g:surround_no_mappings = 1
nmap <Leader>sc cs
nmap <Leader>sd ds
nmap <Leader>sa ysiw
vmap <Leader>sa S

" Remove empty lines
nnoremap <Leader>delk d?.<CR>:noh<CR>
nnoremap <Leader>delj d/.<CR>:noh<CR>

" Add new line
nnoremap <Leader>sn <ESC>i<CR><ESC>

" Delete until
function! DeleteSurroundingCharacters(char)
  let delete_command = 'normal! dT' . a:char . 'dt' . a:char
  execute delete_command
endfunction

command! -nargs=1 DeleteSurrounding call DeleteSurroundingCharacters(<f-args>)
nnoremap <Leader>dua :call DeleteSurroundingCharacters(input('Enter delimiter character: '))<CR>
nnoremap <Leader>dul dt
nnoremap <Leader>dur dT

